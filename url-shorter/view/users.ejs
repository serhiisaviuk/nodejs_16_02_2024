<!DOCTYPE html>
<html>
<head>
    <title>Створення Користувача</title>
    <style>
        .container {
            display: flex;
            justify-content: space-between;
        }

        .user-form {
            width: 50%;
        }

        .user-list {
            width: 45%;
            border-left: 2px solid #000;
            padding-left: 20px;
        }

        .error-message, .success-message {
            color: #ff0000;
            font-weight: bold;
        }
    </style>
</head>
<body>
<div class="container">
    <div class="user-form">
        <h2>Створити користувача</h2>
        <form id="userForm">
            <div>
                <label for="name">Ім'я:</label>
                <input type="text" id="name" name="name" required>
            </div>
            <div>
                <label for="password">Пароль:</label>
                <input type="password" id="password" name="password" required>
            </div>
            <input id="__csrfToken" type="hidden" value="<%= csrfToken %>">
            <button type="submit">Створити</button>
            <div id="responseMessage"></div>
        </form>
    </div>
    <div class="user-list">
        <h2>Доступні користувачі</h2>
        <ul id="users-list">
            <% users.forEach(function(user) { %>
                <li><%= user.name %></li>
            <% }); %>
        </ul>
    </div>
</div>
<script>
    document.getElementById('userForm').addEventListener('submit', function (event) {
        event.preventDefault();

        window.crypto.subtle.generateKey(
            {
                name: "HMAC",
                hash: {name: "SHA-512"}
            },
            true,
            ["sign", "verify"]
        ).then(async (key) => {
            // let password = await window.crypto.subtle.sign("HMAC", key, (document.getElementById("password").value));

            const formData = {
                name: document.getElementById("name").value,
                password: "password",
                csrfToken: document.getElementById("__csrfToken").value
            }

            await send(formData);
        })


        async function send(data) {

            console.log(JSON.stringify(data));

            fetch('/user/create', {
                method: 'POST',
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(data)
            })
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    }
                    throw new Error('Network response was not ok.');
                })
                .then(data => {
                    document.getElementById('responseMessage').innerHTML = '<span class="success-message">Користувача створено успішно!</span>';

                    const userList = document.getElementById('users-list');
                    const newUserItem = document.createElement('li');
                    newUserItem.textContent = data.name;
                    userList.appendChild(newUserItem);
                })
                .catch(error => {
                    if (error.message === '400') {
                        document.getElementById('responseMessage').innerHTML = '<span class="error-message">Помилка при створенні користувача: неправильні дані.</span>';
                    } else if (error.message === '500') {
                        document.getElementById('responseMessage').innerHTML = '<span class="error-message">Помилка сервера. Спробуйте пізніше.</span>';
                    } else {
                        document.getElementById('responseMessage').innerHTML = '<span class="error-message">' + error.message + '</span>';
                    }
                });
        }
    });
</script>
</body>
</html>
